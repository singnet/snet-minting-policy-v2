import {
    Lucid,
    Blockfrost,
    Address,
    MintingPolicy,
    PolicyId,
    Unit,
    fromText,
    Data,
    getAddressDetails,
    C,
    type TxHash 
} from "https://deno.land/x/lucid@0.10.7/mod.ts";

import { Buffer } from 'buffer'

const { PrivateKey } = C;

import { 
    blockfrostKey, 
    owner1PrivateKey, 
    owner2PrivateKey, 
    owner3PrivateKey,
    payerPrivateKey
} from "./secret.ts"


// set blockfrost endpoint
const lucid = await Lucid.new(
    new Blockfrost(
        "https://cardano-preprod.blockfrost.io/api/v0",
        blockfrostKey
    ),
    "Preprod"
);

const owner1Key = PrivateKey.from_normal_bytes(
    Buffer.from(owner1PrivateKey, "hex") 
)
const owner2Key = PrivateKey.from_normal_bytes(
     Buffer.from(owner2PrivateKey, "hex") 
)
const owner3Key = PrivateKey.from_normal_bytes(
    Buffer.from(owner3PrivateKey, "hex") 
)
const payerKey = PrivateKey.from_normal_bytes(
    Buffer.from(payerPrivateKey, "hex") 
)
const owner1KeyBech32 = owner1Key.to_bech32()
const owner2KeyBech32 = owner2Key.to_bech32()
const owner3KeyBech32 = owner3Key.to_bech32()
const payerKeyBech32 = payerKey.to_bech32()

const payerAddress: Address = await (lucid.selectWalletFromPrivateKey(payerKeyBech32)).wallet.address()
const addr2: Address = await (lucid.selectWalletFromPrivateKey(owner2KeyBech32)).wallet.address()
const addr3: Address = await (lucid.selectWalletFromPrivateKey(owner3KeyBech32)).wallet.address()
const addr1: Address = await (lucid.selectWalletFromPrivateKey(owner1KeyBech32)).wallet.address()

const payerPKH: string = getAddressDetails(payerAddress).paymentCredential?.hash || "";
const pkh1: string = getAddressDetails(addr1).paymentCredential?.hash || "";
const pkh2: string = getAddressDetails(addr2).paymentCredential?.hash || "";
const pkh3: string = getAddressDetails(addr3).paymentCredential?.hash || "";

const scriptWith1Signer: string = "59092159091e010000333233223233223232323232323232323232323232323322323232323232222232325335323232325335333573466e3cd540048800802409809454cd4ccd5cd19b88355001220014800009809440984c008028409454cd4c8cc081408c004d540088888888888880204c07126221350022225335004133550280020012213023498c8004d54094894cd40044098884c94cd4c8d40048888888888894cd4ccd54c0b048004c848cc004894cd40088400c4004009408494cd4ccd5cd19b8f011001037036135023001150220042103710355006100110283004001135001220023333573466e1cd55cea80124000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd405805cd5d0a80619a80b00b9aba1500b33501601835742a014666aa034eb94064d5d0a804999aa80d3ae501935742a01066a02c0426ae85401cccd54068089d69aba150063232323333573466e1cd55cea801240004664424660020060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008cd40b1d69aba15002302d357426ae8940088c98c80c8cd5ce01701901809aab9e5001137540026ae854008c8c8c8cccd5cd19b8735573aa004900011991091980080180119a8163ad35742a004605a6ae84d5d1280111931901919ab9c02e032030135573ca00226ea8004d5d09aba2500223263202e33573805405c05826aae7940044dd50009aba1500533501675c6ae854010ccd540680788004d5d0a801999aa80d3ae200135742a00460406ae84d5d1280111931901519ab9c02602a028135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d55cf280089baa00135742a00460206ae84d5d1280111931900e19ab9c01801c01a101b13263201b3357389201035054350001b135573ca00226ea800448c88c008dd6000990009aa80e911999aab9f0012501c233501b30043574200460066ae8800805c8c8c8cccd5cd19b8735573aa004900011991091980080180118061aba150023005357426ae8940088c98c805ccd5ce00980b80a89aab9e5001137540024646464646666ae68cdc39aab9d5004480008cccc888848cccc00401401000c008c8c8c8cccd5cd19b8735573aa0049000119910919800801801180a9aba1500233500d014357426ae8940088c98c8070cd5ce00c00e00d09aab9e5001137540026ae854010ccd54021d728039aba150033232323333573466e1d4005200423212223002004357426aae79400c8cccd5cd19b875002480088c84888c004010dd71aba135573ca00846666ae68cdc3a801a400042444006464c6403c66ae7006807807006c0684d55cea80089baa00135742a00466a012eb8d5d09aba2500223263201833573802803002c26ae8940044d5d1280089aab9e500113754002266aa002eb9d6889119118011bab0013200135501a223233335573e0044a034466a03266aa036600c6aae754008c014d55cf280118021aba200301513574200224464646666ae68cdc3a800a400046a00e600a6ae84d55cf280191999ab9a3370ea00490011280391931900a99ab9c011015013012135573aa00226ea800448488c00800c44880048c8c8cccd5cd19b875001480188c848888c010014c01cd5d09aab9e500323333573466e1d400920042321222230020053009357426aae7940108cccd5cd19b875003480088c848888c004014c01cd5d09aab9e500523333573466e1d40112000232122223003005375c6ae84d55cf280311931900999ab9c00f01301101000f00e135573aa00226ea80048c8c8cccd5cd19b8735573aa004900011991091980080180118029aba15002375a6ae84d5d1280111931900799ab9c00b00f00d135573ca00226ea80048c8cccd5cd19b8735573aa002900011bae357426aae7940088c98c8034cd5ce00480680589baa001232323232323333573466e1d4005200c21222222200323333573466e1d4009200a21222222200423333573466e1d400d2008233221222222233001009008375c6ae854014dd69aba135744a00a46666ae68cdc3a8022400c4664424444444660040120106eb8d5d0a8039bae357426ae89401c8cccd5cd19b875005480108cc8848888888cc018024020c030d5d0a8049bae357426ae8940248cccd5cd19b875006480088c848888888c01c020c034d5d09aab9e500b23333573466e1d401d2000232122222223005008300e357426aae7940308c98c8058cd5ce00900b00a00980900880800780709aab9d5004135573ca00626aae7940084d55cf280089baa0012323232323333573466e1d400520022333222122333001005004003375a6ae854010dd69aba15003375a6ae84d5d1280191999ab9a3370ea0049000119091180100198041aba135573ca00c464c6401e66ae7002c03c0340304d55cea80189aba25001135573ca00226ea80048c8c8cccd5cd19b875001480088c8488c00400cdd71aba135573ca00646666ae68cdc3a8012400046424460040066eb8d5d09aab9e500423263200c33573801001801401226aae7540044dd500089119191999ab9a3370ea00290021091100091999ab9a3370ea00490011190911180180218031aba135573ca00846666ae68cdc3a801a400042444004464c6401a66ae7002403402c0280244d55cea80089baa0012323333573466e1d40052002200f23333573466e1d40092000200f23263200933573800a01200e00c26aae74dd5000a4903505431003200135500b22112225335001135003220012213335005220023004002333553007120010050040012326320033357389201206578706563746564206f6e6c79206f6e65206d696e74696e6720706f6c6963790000349848004c8004d5401c8894cd40044008884d400888cc01cccc02000801800400cc8004d5401888894cd40044008884d4008894cd4ccd5cd19b87001480000340304ccc02001c01800c4ccc02001ccd402448ccc00402000c00801800c4488008488488cc00401000c448848cc00400c008488008488004448c8c00400488cc00cc008008004ccd44888cd40092211c2a83c7337d41ecaae97eeca7b5d0084d7e92cf2ffd63b7a050e081c500500311220021221223300100400312001489064e544f4b454e0001"
const scriptWith2Signers: string = "590944590941010000333233223233223232323232323232323232323232332232323232323232222232325335323232325335333573466e3cd540048800802409809454cd4ccd5cd19b88355001220014800009809440984c008028409454cd4c8cc081408c004d540088888888888880204c07126221350022225335004133550280020012213023498c8004d54094894cd40044098884c94cd4c8d40048888888888894cd4ccd54c06c48004c848cc004894cd40088400c4004009408894cd4ccd5cd19b8f011001037036135024001150230042103710355006100110283004001135001220023333573466e1cd55cea80124000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd405c060d5d0a80619a80b80c1aba1500b33501701935742a014666aa036eb94068d5d0a804999aa80dbae501a35742a01066a02e0446ae85401cccd5406c08dd69aba150063232323333573466e1cd55cea801240004664424660020060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008cd40b5d69aba15002302e357426ae8940088c98c80c8cd5ce01781901809aab9e5001137540026ae854008c8c8c8cccd5cd19b8735573aa004900011991091980080180119a816bad35742a004605c6ae84d5d1280111931901919ab9c02f032030135573ca00226ea8004d5d09aba2500223263202e33573805605c05826aae7940044dd50009aba1500533501775c6ae854010ccd5406c07c8004d5d0a801999aa80dbae200135742a00460426ae84d5d1280111931901519ab9c02702a028135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d55cf280089baa00135742a00460226ae84d5d1280111931900e19ab9c01901c01a101b13263201b3357389201035054350001b135573ca00226ea8004c8004d5407088448894cd40044d400c88004884ccd401488008c010008ccd54c01c4800401401000448c88c008dd6000990009aa80e111999aab9f0012501b233501a30043574200460066ae880080588c8c8cccd5cd19b8735573aa004900011991091980080180118061aba150023005357426ae8940088c98c8058cd5ce00980b00a09aab9e5001137540024646464646666ae68cdc39aab9d5004480008cccc888848cccc00401401000c008c8c8c8cccd5cd19b8735573aa0049000119910919800801801180a9aba1500233500d014357426ae8940088c98c806ccd5ce00c00d80c89aab9e5001137540026ae854010ccd54021d728039aba150033232323333573466e1d4005200423212223002004357426aae79400c8cccd5cd19b875002480088c84888c004010dd71aba135573ca00846666ae68cdc3a801a400042444006464c6403a66ae7006807406c0680644d55cea80089baa00135742a00466a012eb8d5d09aba2500223263201733573802802e02a26ae8940044d5d1280089aab9e500113754002266aa002eb9d6889119118011bab00132001355019223233335573e0044a032466a03066aa034600c6aae754008c014d55cf280118021aba200301413574200224464646666ae68cdc3a800a400046a00e600a6ae84d55cf280191999ab9a3370ea00490011280391931900a19ab9c011014012011135573aa00226ea800448488c00800c44880048c8c8cccd5cd19b875001480188c848888c010014c01cd5d09aab9e500323333573466e1d400920042321222230020053009357426aae7940108cccd5cd19b875003480088c848888c004014c01cd5d09aab9e500523333573466e1d40112000232122223003005375c6ae84d55cf280311931900919ab9c00f01201000f00e00d135573aa00226ea80048c8c8cccd5cd19b8735573aa004900011991091980080180118029aba15002375a6ae84d5d1280111931900719ab9c00b00e00c135573ca00226ea80048c8cccd5cd19b8735573aa002900011bae357426aae7940088c98c8030cd5ce00480600509baa001232323232323333573466e1d4005200c21222222200323333573466e1d4009200a21222222200423333573466e1d400d2008233221222222233001009008375c6ae854014dd69aba135744a00a46666ae68cdc3a8022400c4664424444444660040120106eb8d5d0a8039bae357426ae89401c8cccd5cd19b875005480108cc8848888888cc018024020c030d5d0a8049bae357426ae8940248cccd5cd19b875006480088c848888888c01c020c034d5d09aab9e500b23333573466e1d401d2000232122222223005008300e357426aae7940308c98c8054cd5ce00900a80980900880800780700689aab9d5004135573ca00626aae7940084d55cf280089baa0012323232323333573466e1d400520022333222122333001005004003375a6ae854010dd69aba15003375a6ae84d5d1280191999ab9a3370ea0049000119091180100198041aba135573ca00c464c6401c66ae7002c03803002c4d55cea80189aba25001135573ca00226ea80048c8c8cccd5cd19b875001480088c8488c00400cdd71aba135573ca00646666ae68cdc3a8012400046424460040066eb8d5d09aab9e500423263200b33573801001601201026aae7540044dd500089119191999ab9a3370ea00290021091100091999ab9a3370ea00490011190911180180218031aba135573ca00846666ae68cdc3a801a400042444004464c6401866ae700240300280240204d55cea80089baa0012323333573466e1d40052002200e23333573466e1d40092000200e23263200833573800a01000c00a26aae74dd5000a4810350543100232632003335738921206578706563746564206f6e6c79206f6e65206d696e74696e6720706f6c6963790000349848004c8004d5401c8894cd40044008884d400888cc01cccc02000801800400cc8004d5401888894cd40044008884d4008894cd4ccd5cd19b87001480000340304ccc02001c01800c4ccc02001ccd402448ccc00402000c00801800c4488008488488cc00401000c448848cc00400c008488008488004448c8c00400488cc00cc008008004ccd44888cd40092211c2a83c7337d41ecaae97eeca7b5d0084d7e92cf2ffd63b7a050e081c50033500248811c72685a71048aec57d28d426a9a54bbef55853ac6baac469b7091724900500311220021221223300100400312001489064e544f4b454e0001"
const scriptWith3Signers: string = "59097a590977010000333233223233223232323232323232323232323232332232323232323232322222323253353232325335333573466e3cd540048800802009809454cd4ccd5cd19b88355001220014800009809440984ccd54c02848004c8cd403088ccd400c88008008004d40048800448cc004894cd4008400440a009cc88d40088888888888894cd4ccd54c06048004cd4064894cd40088400c4005408094cd4ccd5cd19b8f00e001035034135022001150210042103510335002009102515335323302050230013550012222222222220081301c498884d40088894cd40104cd540a0008004884c08d26135001220023333573466e1cd55cea80124000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd4060064d5d0a80619a80c00c9aba1500b33501801a35742a014666aa038eb9406cd5d0a804999aa80e3ae501b35742a01066a0300466ae85401cccd54070091d69aba150063232323333573466e1cd55cea801240004664424660020060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008cd40b9d69aba15002302f357426ae8940088c98c80cccd5ce01801981889aab9e5001137540026ae854008c8c8c8cccd5cd19b8735573aa004900011991091980080180119a8173ad35742a004605e6ae84d5d1280111931901999ab9c030033031135573ca00226ea8004d5d09aba2500223263202f33573805805e05a26aae7940044dd50009aba1500533501875c6ae854010ccd540700808004d5d0a801999aa80e3ae200135742a00460446ae84d5d1280111931901599ab9c02802b029135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d55cf280089baa00135742a00460246ae84d5d1280111931900e99ab9c01a01d01b101c13263201c3357389201035054350001c135573ca00226ea8004c8004d5407488448894cd40044d400c88004884ccd401488008c010008ccd54c01c4800401401000448848cc00400c00848c88c008dd6000990009aa80e111999aab9f0012501b233501a30043574200460066ae880080588c8c8cccd5cd19b8735573aa004900011991091980080180118061aba150023005357426ae8940088c98c8058cd5ce00980b00a09aab9e5001137540024646464646666ae68cdc39aab9d5004480008cccc888848cccc00401401000c008c8c8c8cccd5cd19b8735573aa0049000119910919800801801180a9aba1500233500d014357426ae8940088c98c806ccd5ce00c00d80c89aab9e5001137540026ae854010ccd54021d728039aba150033232323333573466e1d4005200423212223002004357426aae79400c8cccd5cd19b875002480088c84888c004010dd71aba135573ca00846666ae68cdc3a801a400042444006464c6403a66ae7006807406c0680644d55cea80089baa00135742a00466a012eb8d5d09aba2500223263201733573802802e02a26ae8940044d5d1280089aab9e500113754002266aa002eb9d6889119118011bab00132001355019223233335573e0044a032466a03066aa034600c6aae754008c014d55cf280118021aba200301413574200224464646666ae68cdc3a800a400046a00e600a6ae84d55cf280191999ab9a3370ea00490011280391931900a19ab9c011014012011135573aa00226ea800448488c00800c44880048c8c8cccd5cd19b875001480188c848888c010014c01cd5d09aab9e500323333573466e1d400920042321222230020053009357426aae7940108cccd5cd19b875003480088c848888c004014c01cd5d09aab9e500523333573466e1d40112000232122223003005375c6ae84d55cf280311931900919ab9c00f01201000f00e00d135573aa00226ea80048c8c8cccd5cd19b8735573aa004900011991091980080180118029aba15002375a6ae84d5d1280111931900719ab9c00b00e00c135573ca00226ea80048c8cccd5cd19b8735573aa002900011bae357426aae7940088c98c8030cd5ce00480600509baa001232323232323333573466e1d4005200c21222222200323333573466e1d4009200a21222222200423333573466e1d400d2008233221222222233001009008375c6ae854014dd69aba135744a00a46666ae68cdc3a8022400c4664424444444660040120106eb8d5d0a8039bae357426ae89401c8cccd5cd19b875005480108cc8848888888cc018024020c030d5d0a8049bae357426ae8940248cccd5cd19b875006480088c848888888c01c020c034d5d09aab9e500b23333573466e1d401d2000232122222223005008300e357426aae7940308c98c8054cd5ce00900a80980900880800780700689aab9d5004135573ca00626aae7940084d55cf280089baa0012323232323333573466e1d400520022333222122333001005004003375a6ae854010dd69aba15003375a6ae84d5d1280191999ab9a3370ea0049000119091180100198041aba135573ca00c464c6401c66ae7002c03803002c4d55cea80189aba25001135573ca00226ea80048c8c8cccd5cd19b875001480088c8488c00400cdd71aba135573ca00646666ae68cdc3a8012400046424460040066eb8d5d09aab9e500423263200b33573801001601201026aae7540044dd500089119191999ab9a3370ea00290021091100091999ab9a3370ea00490011190911180180218031aba135573ca00846666ae68cdc3a801a400042444004464c6401866ae700240300280240204d55cea80089baa0012323333573466e1d40052002200e23333573466e1d40092000200e23263200833573800a01000c00a26aae74dd5000a4810350543100232632003335738921206578706563746564206f6e6c79206f6e65206d696e74696e6720706f6c6963790000349848004c8004d5401c8894cd40044008884d400888cc01cccc02000801800400cc8004d5401888894cd40044008884d4008894cd4ccd5cd19b87001480000340304ccc02001c01800c4ccc02001ccd402448ccc00402000c00801800c4488008488488cc00401000c448848cc00400c008488008488004448c8c00400488cc00cc008008004ccd44888cd40092211c2a83c7337d41ecaae97eeca7b5d0084d7e92cf2ffd63b7a050e081c50033500248811c72685a71048aec57d28d426a9a54bbef55853ac6baac469b709172490033500248811ccca20bf9b05c9b8701bf8355bcad6821207033054f4f535fe40084d000500311220021221223300100400312001489064e544f4b454e0001";

function completeScript(policy: string) : { type: Lucid.ScriptType; script: string; } {
    return {
        type: "PlutusV2",
        script: policy
    };
};


const isTxValidated = async(txHash: string) => {
    if(!txHash) 
        throw ("No transaction hash provided")
    if(!(typeof 'TxHash' == typeof txHash)) 
        throw("Unappropriate type of transaction hash")
    if(!await lucid.awaitTx(txHash)) 
        throw ("Transaction wasn't validated")
}


const policyId1: PolicyId = lucid.utils.mintingPolicyToId(completeScript(scriptWith1Signer));
const unit1: Unit = policyId1 + fromText("NTOKEN");

// 1 signer 
const withOneSigner = async(amount: bigint) => {
    console.log("%c with one signer", "color: gray; font-size: 20px; font-weight: bold");

    const tx = await lucid
        .newTx()
        .mintAssets({[unit1]: amount}, Data.void())
        .attachMintingPolicy(completeScript(scriptWith1Signer))
        .addSignerKey(pkh1)  
        .complete();

    const signedTx = await tx.sign().complete();
    const txHash = await signedTx.submit();

    await isTxValidated(txHash)

    console.log("✅ txHash from `withOneSigner`: " + txHash + "\n");
}


const policyId2: PolicyId = lucid.utils.mintingPolicyToId(completeScript(scriptWith2Signers));
const unit2: Unit = policyId2 + fromText("NTOKEN");

// 2 signers
const withTwoSigners = async(amount: bigint) => {
    console.log("%c with two signers", "color: gray; font-size: 20px; font-weight: bold");

    const tx = await lucid
        .newTx()
        .mintAssets({[unit2]: amount}, Data.void())
        .attachMintingPolicy(completeScript(scriptWith2Signers))
        .addSignerKey(pkh1)  
        .addSignerKey(pkh2)  // add more then
        .complete();

    const signedTx = await tx.sign()
        .signWithPrivateKey(owner2KeyBech32)
        .complete();
    const txHash = await signedTx.submit();

    await isTxValidated(txHash)

    console.log("✅ txHash from `withTwoSigners`: " + txHash + "\n");
}


const policyId3: PolicyId = lucid.utils.mintingPolicyToId(completeScript(scriptWith3Signers));
const unit3: Unit = policyId3 + fromText("NTOKEN");

// 3 signers
const withThreeSigners = async(amount: bigint) => {
    console.log("%c with three signers", "color: gray; font-size: 20px; font-weight: bold");

    const tx = await lucid
        .newTx()
        .mintAssets({[unit3]: amount}, Data.void())
        .attachMintingPolicy(completeScript(scriptWith3Signers))
        .addSignerKey(pkh1) 
        .addSignerKey(pkh2)   
        .addSignerKey(pkh3) 
        .complete();

    const signedTx = await tx.sign()
        .signWithPrivateKey(owner2KeyBech32)
        .signWithPrivateKey(owner3KeyBech32)
        .complete();
    const txHash = await signedTx.submit();

    await isTxValidated(txHash)

    console.log("✅ txHash from `withThreeSigners`: " + txHash + "\n");
}

// 3 signers
const withThreeSignersFromPrivateKeys = async(amount: bigint) => {
    console.log("%c with three signers", "color: gray; font-size: 20px; font-weight: bold");

    const tx = await lucid
        .newTx()
        .mintAssets({[unit3]: amount}, Data.void())
        .attachMintingPolicy(completeScript(scriptWith3Signers))
        .addSignerKey(pkh1) 
        .addSignerKey(pkh2)   
        .addSignerKey(pkh3) 
        .complete();

    const signedTx = await tx.sign()
        .signWithPrivateKey(owner1KeyBech32)
        .signWithPrivateKey(owner2KeyBech32)
        .signWithPrivateKey(owner3KeyBech32)
        .complete();
    const txHash = await signedTx.submit();

    await isTxValidated(txHash)

    console.log("✅ txHash from `withThreeSigners`: " + txHash + "\n");
}

const transfer = async(to: Address, unit: Unit, amount: bigint) => {
    console.log("%ctransfer", "color: gray; font-size: 20px; font-weight: bold");

    const tx = await lucid
        .newTx()
        .payToAddress(to, {[unit]: amount, lovelace: 5000000n})
        .payToAddress(to, {lovelace: 5000000n})  // just for test
        .complete();

    const signedTx = await tx.sign().complete();
    const txHash = await signedTx.submit();

    await isTxValidated(txHash)

    console.log("txHash from `transfer`: " + txHash + "\n");
}


// due to delays in blockchain
function delay(ms: number) {
    return new Promise( resolve => setTimeout(resolve, ms) );
}

const burnTokens = async(script: string, unit: Unit, amount: bigint) => {
    const tx = await lucid
        .newTx()
        .mintAssets({[unit]: amount}, Data.void())
        .attachMintingPolicy(completeScript(script))
        .complete();

    const signedTx = await tx.sign().complete();
    const txHash = await signedTx.submit();

    await isTxValidated(txHash)

    console.log("✅ txHash from `burnTokens`: " + txHash + "\n");
}

// if something is wrong, add seconds to wait
const secondsToWait: number = 1000*30

const main = async() => {
    try {
        console.log(
            "%c*****  Testing: MINTING    *****\n", "color: blue"
        )
         
        await withOneSigner(10n)
        await delay(secondsToWait)

        await withTwoSigners(10n)
        await delay(secondsToWait)

        await withThreeSigners(10n)
        await delay(secondsToWait)


        console.log("\n" + 
            "%c*****  Testing: BURNING    *****", "color: blue"
        )

        // owner of tokens can burn tokens on their own, 
        // without other signatures

        // owner1 can burn tokens on their own
        console.log("%cOwner1 burns tokens with 1 sign", "color: gray; font-size: 20px; font-weight: bold");
        await burnTokens(scriptWith1Signer, unit1,-1n)
        await delay(secondsToWait)

        console.log("%cOwner1 burns tokens with 3 signs", "color: gray; font-size: 20px; font-weight: bold");
        await burnTokens(scriptWith3Signers, unit3,-5n)
        await delay(secondsToWait)

        // transfer tokens to another address that isn't owner
        console.log("transfer of tokens to another address");
        await transfer(payerAddress, unit1, 2n)
        await delay(secondsToWait)

        await transfer(payerAddress, unit3, 2n)
        await delay(secondsToWait)
        
        await (lucid.selectWalletFromPrivateKey(payerKeyBech32))

        console.log("%cAnother address burns their tokens with 1 sign", "color: gray; font-size: 20px; font-weight: bold");
        await burnTokens(scriptWith1Signer, unit1, -1n)
        await delay(secondsToWait)

        console.log("%cAnother address burns their tokens with 3 signs", "color: gray; font-size: 20px; font-weight: bold");
        await burnTokens(scriptWith3Signers, unit3, -2n)
        await delay(secondsToWait)

        console.log("\n" + 
            "%c*****  Testing: NOT OWNER MINTING    *****", "color: blue"
        )
        // another address can mint too, all owners signed transaction
        await withThreeSignersFromPrivateKeys(10n)
        await delay(secondsToWait)


    } catch(error) {
        console.log("Error while running tests: ", error)
   }

}


await main()

